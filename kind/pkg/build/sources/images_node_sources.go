// Code generated by go-bindata.
// sources:
// ../../../images/node/20-kubeadm.conf
// ../../../images/node/Dockerfile
// ../../../images/node/debug-node.service
// ../../../images/node/entrypoint/main.go
// ../../../images/node/journalctl-to-tty.service
// ../../../images/node/kubeadm.sh
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesNode20KubeadmConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x48\xcb\xac\x50\xc8\x2e\x4d\x4a\xcd\x49\x2d\x51\x48\x4b\xcc\xcc\xc9\xcc\x4b\x57\xc8\xcf\x53\x28\x2e\x4f\x2c\x50\x48\xcd\x4b\x4c\xca\x49\x4d\xe1\x8a\x0e\x4e\x2d\x2a\xcb\x4c\x4e\x8d\xe5\x72\xcd\x2b\xcb\x2c\xca\xcf\xcb\x4d\xcd\x2b\xb1\x55\xf2\x0e\x75\x72\xf5\x71\x0d\x89\x77\x8d\x08\x09\x72\x8c\x77\x0c\x72\x0f\xb6\xd5\xd5\x05\x99\xa1\x0b\xd2\xad\x9b\x9f\x67\x9b\x96\x98\x53\x9c\xaa\xc4\x05\x08\x00\x00\xff\xff\xb9\x28\xc4\x46\x66\x00\x00\x00")

func imagesNode20KubeadmConfBytes() ([]byte, error) {
	return bindataRead(
		_imagesNode20KubeadmConf,
		"images/node/20-kubeadm.conf",
	)
}

func imagesNode20KubeadmConf() (*asset, error) {
	bytes, err := imagesNode20KubeadmConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/20-kubeadm.conf", size: 102, mode: os.FileMode(420), modTime: time.Unix(1532911319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x38\xd2\xff\xdf\x9f\x62\x1e\x39\x68\x93\x5d\x4b\x4a\x9c\xb6\x9b\xcd\x22\x78\xce\x4d\xdc\xac\xd1\xd6\x2e\x6c\x77\x8b\x62\x6f\x11\x50\xd4\x58\xe2\x99\x22\x75\x24\x65\xd7\xed\x75\x3f\xfb\x61\x28\xc9\x2f\x49\x7a\xb7\x77\x8b\x2b\x0a\xc4\xe2\xcb\x70\x5e\x7f\xf3\x23\xbb\x70\xad\xcb\x8d\x11\x59\xee\xa0\x7f\x7a\x76\x01\xf3\x1c\xe1\x75\x95\xa0\x51\xe8\xd0\xc2\xa0\x72\xb9\x36\x36\xea\x74\x3b\x5d\x78\x23\x38\x2a\x8b\x29\x54\x2a\x45\x03\x2e\x47\x18\x94\x8c\xe7\xd8\xce\xf4\xe0\x17\x34\x56\x68\x05\xfd\xe8\x14\x8e\x69\x41\xd0\x4c\x05\x27\x3f\x75\xba\xb0\xd1\x15\x14\x6c\x03\x4a\x3b\xa8\x2c\x82\xcb\x85\x85\x85\x90\x08\xf8\x89\x63\xe9\x40\x28\xe0\xba\x28\xa5\x60\x8a\x23\xac\x85\xcb\xfd\x31\x8d\x90\xa8\xd3\x85\x8f\x8d\x08\x9d\x38\x26\x14\x30\xe0\xba\xdc\x80\x5e\xec\xaf\x03\xe6\xbc\xc2\xf4\x2f\x77\xae\xbc\x8c\xe3\xf5\x7a\x1d\x31\xaf\x6c\xa4\x4d\x16\xcb\x7a\xa1\x8d\xdf\x8c\xae\x87\xe3\xd9\x30\xec\x47\xa7\x7e\xcb\x7b\x25\xd1\x5a\x30\xf8\xf7\x4a\x18\x4c\x21\xd9\x00\x2b\x4b\x29\x38\x4b\x24\x82\x64\x6b\xd0\x06\x58\x66\x10\x53\x70\x9a\xf4\x5d\x1b\xe1\x84\xca\x7a\x60\xf5\xc2\xad\x99\xc1\x4e\x17\x52\x61\x9d\x11\x49\xe5\x0e\x9c\xd5\x6a\x27\xec\xc1\x02\xad\x80\x29\x08\x06\x33\x18\xcd\x02\x78\x39\x98\x8d\x66\xbd\x4e\x17\x3e\x8c\xe6\x3f\x4f\xde\xcf\xe1\xc3\x60\x3a\x1d\x8c\xe7\xa3\xe1\x0c\x26\x53\xb8\x9e\x8c\x6f\x46\xf3\xd1\x64\x3c\x83\xc9\x2b\x18\x8c\x3f\xc2\xeb\xd1\xf8\xa6\x07\x28\x5c\x8e\x06\xf0\x53\x69\x48\x7f\x6d\x40\x90\x1b\x31\x25\x9f\xcd\x10\x0f\x14\x58\xe8\x5a\x21\x5b\x22\x17\x0b\xc1\x41\x32\x95\x55\x2c\x43\xc8\xf4\x0a\x8d\x12\x2a\x83\x12\x4d\x21\x2c\x05\xd3\x02\x53\x69\xa7\x0b\x52\x14\xc2\x31\xe7\x47\x1e\x18\x15\x75\x3a\x5d\x58\x0a\x95\x02\x97\x95\x75\x68\x20\x61\x64\x6a\xc1\x32\xec\x41\x52\x09\xe9\xc8\xd0\x5d\x6a\x3d\xb5\x90\x62\x22\x98\x0a\x69\x61\xa7\x0b\xeb\x5c\xf0\x9c\x7c\x93\x30\x2b\x38\x93\x72\x03\x0c\x56\x68\x36\x40\xae\x2a\x4b\x4c\x21\xd5\x6b\xd5\xec\xaa\x25\xc3\xf1\xef\xcf\xce\xdf\xbe\x3c\xe9\x74\xc1\xe5\xcc\x81\xcd\x45\x69\xeb\xb4\x61\x60\x0b\x26\x25\x54\x4e\x48\xe1\x36\xf0\x94\x4b\x64\x2a\x14\xca\x3a\x26\xe5\xd3\xdd\x71\x24\x2b\x45\x26\x21\x35\xba\xa4\x80\x2e\xb4\xe9\x74\x81\x95\x2e\xcc\xd0\x41\x55\xa6\xcc\x21\x3c\x79\xb2\x1d\x69\x44\xc0\xd1\x5f\xa0\xd3\x05\x8b\xe8\x73\xcc\x5e\xc6\x71\x26\x5c\x5e\x25\x11\xd7\x45\xbc\xdc\x1a\xba\xff\xd3\x19\xc4\xb8\x60\xe4\x9f\x98\x7c\x92\xc6\x07\x3e\xe8\x74\x61\xae\xeb\xa2\x58\x23\xb0\x34\x05\xbb\xb1\x0e\x8b\xb4\x07\xd7\xe3\x51\x8f\xe2\x00\xda\xc7\xd9\x69\x2d\x2d\x28\xc4\xb4\xce\x43\x53\xd5\xbe\x65\x69\xe1\xc5\xbc\xd2\xa6\xdd\x0b\xdf\x43\xaa\xf9\x12\x0d\x2c\xc4\x27\xb4\x54\x77\x29\x24\x28\xf5\xba\xe7\x95\xa7\x20\x2e\xb4\x94\x7a\x4d\x61\x67\xc6\x09\x2e\xd1\x5e\x76\xba\x5b\xb3\x52\x5c\xa1\xd4\x25\x1a\x1b\x19\x4c\x73\xe6\xbc\x85\x89\xd4\x59\xdc\x3f\x3d\x7b\x16\x9f\x3e\xa7\xff\xa6\x52\x94\x38\x61\x73\x6c\x48\x51\x10\x2a\xac\xcf\x0e\xb9\x56\x54\xaf\x68\xe2\x3f\x2c\xf8\x45\x7c\xfa\x63\x7c\x76\xfe\x40\xb0\x50\x21\x0b\x95\x56\x61\x69\xc4\x4a\x48\xcc\x30\xdd\x17\x4f\x4e\x9c\xdc\x4c\x8e\x13\x54\x2e\x47\x94\x29\x9a\x93\x4b\x2a\x0c\xa9\x0d\x82\xad\xca\x52\x1b\x2a\xd8\xc6\x93\xcc\xf0\x1c\x6d\x0f\x46\xc3\x76\xae\x06\xb6\xe9\xf5\xcf\xc0\x4c\x16\x35\xce\x54\x7a\x5d\x07\x46\x58\xb0\x4e\x48\x49\x79\x33\x98\xde\x82\xd5\x14\x2b\xce\x14\x18\x24\x48\x13\xb4\xdf\xe8\x2a\xcb\x75\x55\x8b\xf2\x81\xa6\x04\x17\xce\x8f\x91\xbd\xc2\x7a\x15\x68\xb1\xf6\x8b\xb6\x06\x44\x1d\x92\x4a\xc7\x5f\x05\xac\x48\x5f\x3c\x0b\xfc\xc0\xcb\xc1\x6c\x78\x37\x7a\x3b\xb8\x1d\xde\xfd\x32\x9c\xce\x46\x93\xf1\x55\x70\x1a\x9d\xdf\x9f\xbc\x0a\x96\x17\x36\xca\xb8\x89\x84\xde\xcf\xad\xf0\xe8\x0b\x89\xfc\x7a\x79\xf4\xe5\xa1\xa4\xaf\x41\xe7\xd5\x74\xf2\x16\xf6\xe7\xbe\x92\x1f\xc7\x93\xf9\xf0\xb2\x76\x45\x51\x59\x07\x09\x42\x8a\x0b\xa1\x30\x05\x96\x79\xf4\x5d\x50\xa5\xd3\xe6\xfd\xa8\x6a\x6e\xa3\x3a\xec\x3e\x9e\xa8\x32\xa1\x30\x36\xb8\x40\x83\x8a\x63\x9d\xf9\x68\xe2\xae\xe5\xba\xc4\x87\xf6\xfa\xaa\x72\xde\x41\x37\xc3\x97\xa3\xc1\xf8\xee\xd5\x74\x32\x9e\x0f\xc7\x37\x57\x4a\x2b\xa1\x1c\x1a\xc6\x9d\x58\x21\x58\xa7\x4b\x0b\x56\x17\x48\xd5\x09\x6b\xe6\xb1\xcb\xf6\xb6\xa1\xa2\x46\x43\xc5\x0c\x86\x2a\x9c\x99\xac\x2a\x50\xb9\x1e\xac\xf1\xa9\x41\x38\x66\xc9\x49\x65\xe9\x1c\xd2\xc1\x69\xa0\xf2\x66\xe0\xb0\x28\xb5\x61\x66\x03\xc3\xf1\x2f\xb5\xa5\x75\x54\xfe\xb5\x36\x9d\x2e\xdc\xa2\x83\x14\x4b\x54\x29\x2a\x2e\xd0\x52\x2e\x52\x06\x6c\xa1\x10\x98\x34\xc8\xd2\x0d\xe4\xcc\x5e\x82\xb5\x79\x8f\x14\xef\x81\x55\xac\x4c\xfd\xea\x5a\xef\xc4\xe8\x25\xaa\x1a\xf0\x84\x72\x9a\xca\x31\x84\x92\xf1\x25\xcb\x90\x0a\x9f\xa3\xb5\xa4\x21\x41\x79\x03\x48\x64\x47\xed\xf6\xfb\x8b\xf7\x51\xc2\xa2\x59\x09\x8e\x16\x8e\x9b\x7a\x3a\x79\x74\x35\xc9\x6d\x60\x23\x86\x7c\x53\xa2\x21\x18\x83\x18\x76\x68\xe6\x3b\xb5\x56\xa8\x9c\xf5\x22\x0a\x61\xf9\x4e\xce\x71\x0d\xbc\x02\x3d\x96\xf9\xca\x50\xa0\x2b\x03\x64\x12\xc1\x97\x50\xd9\x49\xed\x1f\xe5\x2b\x88\xe0\xb9\x2a\xe1\xd8\x60\xa1\x57\x64\x4b\xa5\xd6\x4c\x51\x83\x6c\x81\xac\x55\xfd\xe4\x7f\x87\x4d\xd3\xf7\x63\x38\x68\x14\xf0\xd7\x8e\xa7\x11\x1e\xfd\x9d\x61\xca\x12\x44\x84\xfe\x78\xe0\x2c\xe4\x68\x1c\xb5\x50\xe6\x1d\x52\x19\xb9\xa5\x01\x61\x69\x48\x2f\xf2\x40\xc8\x75\x51\x68\x05\x99\xaa\xca\xac\x0f\xd2\x26\xa1\x41\x89\x94\x15\xad\xf8\xad\x8d\x8d\x86\x76\x63\x57\xdb\x49\x51\x3a\xa2\x1f\x16\x44\x69\x74\xe5\xb0\x0f\xe8\x72\xf2\x21\x58\xcd\x99\xf3\x3d\x2e\x94\x42\x55\x9f\xa0\xd0\x95\x72\x80\x49\xb3\xa1\x4a\x71\x05\xcb\x42\xa7\xc0\xaa\x85\x0d\xeb\xb6\xd1\x8a\x4d\x98\xcd\x9b\x8f\x27\x4f\x60\x41\xcd\x3b\x96\x22\x89\x1b\x1d\x9a\xbf\xf4\x47\x28\xe1\x22\xc7\x4c\x86\x2e\xa2\xa0\xd8\x18\x42\xc5\x0a\x84\xa0\xd5\xd7\x15\x25\xf1\x38\x1b\x5a\x74\x55\x19\x35\xa1\x0a\x20\x4c\x51\xa2\xc3\xdd\x31\xa6\x80\x70\xf1\xe8\x39\x45\x25\x9d\x08\x2b\x8b\xe6\xf0\xa8\xef\x1e\x6c\x46\xc7\xef\x6f\xfe\xee\x9b\x8b\x1f\x39\x49\x6a\xce\x64\xb8\xb0\xff\xee\x9c\xc7\x9c\x41\x29\xe3\xee\xef\x24\x37\xff\x89\xed\xe4\x5e\xee\xe4\x1f\x92\xe0\xd9\xd1\xbd\xfd\x84\x98\xa3\x26\x5f\xeb\x9c\xee\x35\xfc\x86\xaa\xd9\x52\xe9\xe7\xac\x2c\xb1\x05\xec\x35\x6e\x49\x8c\xc7\xce\x86\x3d\x6f\x6b\x97\x25\xda\xc3\x19\xe1\x96\xe7\xa7\xdf\x82\xf6\x46\x4a\xec\x73\x2f\x6e\xcb\x09\xe3\x2a\xa9\x94\xab\xe2\xae\x45\x17\x56\x65\xe8\x72\x0c\x0d\x96\xda\x0a\xa7\xcd\x86\xf0\x58\xa5\x5b\x99\x3b\x40\xf1\x3d\x4b\x73\x1b\xfb\x1c\x8a\x85\x6a\xa1\xd4\xb5\x07\x85\xcb\x9a\xe3\xc4\xdd\x1d\xe6\x85\x7b\x98\x47\xf8\x5d\x7f\x3e\xb5\x70\xfb\xee\x16\x96\xb8\xf1\x13\xc4\xa5\x3c\xd1\x11\x2a\x43\x53\x1a\xa1\xdc\xc1\xf8\x81\x76\x61\x4b\xfa\x3c\x34\x8b\x7b\x8e\x6d\x80\x6a\xdb\x1e\xcf\x7e\x88\x4e\xcf\x09\xb3\xf5\x62\x21\xb8\xf0\xc4\xb5\x61\x12\xf5\xfd\x61\xef\x3a\xc5\x2b\x63\x50\x39\xb9\xe9\x35\xbc\xa1\x14\xaa\x66\x00\xcc\x45\x7b\xa8\xf6\x88\x4f\x1c\xb3\x4b\x1b\xfb\x02\x7e\xe0\x8d\xba\x39\x4d\xae\x5f\x0f\xa7\x3b\x76\xe0\xf5\x8a\xfa\xbf\x73\x0c\x4f\x7f\x6f\xa8\x80\x75\x06\x1d\xcf\x03\x1f\x82\x86\x49\x6e\x9b\x1d\xaa\x55\xcf\x37\xcc\x7b\xdd\x32\xda\x76\x63\xdf\x55\x9d\x06\x06\x44\xbf\x3e\xa3\xd1\xb0\x62\xb2\xa2\x54\xb1\x42\x52\x6f\xb7\x0d\x7b\xad\x1b\x31\x2c\x8c\x2e\x3c\x72\x2e\x71\x43\x2d\x2c\xf8\x50\x4f\x5c\xb6\x83\xa0\x2b\x57\x56\x44\xdc\x75\x25\x53\x7f\x7a\x42\x89\x68\x28\xf1\x8e\xad\x4b\x89\x30\x35\x7d\x9c\x1a\xb3\x29\x84\x62\xf2\xa4\xa6\x3d\x83\x77\xf3\xbb\xd7\xc3\x8f\x77\x37\x93\xf1\xfc\xee\xc3\x60\x3a\xbe\x9b\x8c\xef\x6e\x06\xe3\xdb\xe1\x74\xf2\x7e\x76\xf7\x7e\xe6\x09\xd1\x82\x49\x8b\x41\x8d\xec\x84\xcf\xe1\xc2\xce\xde\x40\xb0\x4b\xe9\xb5\x92\x9a\xa5\xfb\x69\x5d\xa7\xf3\xd1\x71\x54\x43\x8d\xb6\x2d\x5c\xff\x04\xc8\x73\x0d\xc1\xd1\xe8\x26\x38\x89\xb3\x32\x0b\xe0\x1f\x5b\x53\x28\x97\xc2\x5d\x09\xb7\xc3\x7b\x29\x07\xa7\xc3\x97\xaf\xae\x6f\x2e\x2e\x76\xab\x6a\xe2\xd3\xb0\xb3\x80\x64\x84\xb4\x71\x97\x8f\x5b\xb4\x06\x08\x52\x4c\xe0\x57\x22\xac\x57\xcd\x86\xdf\xe0\xcf\x9b\x01\x47\xc7\xd2\x26\x77\x6d\x43\x0a\xb9\x3d\x01\xeb\xdb\x47\xb0\x53\xf3\xb0\x27\x06\xdb\x4a\xbf\x3a\xfa\x72\x98\x77\x5f\x83\x7d\x30\xba\x1e\x8f\x20\x11\x8a\x19\xa2\x01\x4e\x43\xac\x4b\x17\x73\x25\xe2\x44\xa8\xc7\x79\x7a\xaa\x39\xac\xf3\x0d\xc4\xb0\xa6\x0b\x5d\x8e\xa6\x26\x88\xd7\xe3\xd1\x3e\xf1\x7d\x11\x9d\x06\xdb\xf1\xf9\x60\xfa\x72\xf0\xe6\xcd\x55\xc0\x95\x08\x4b\x59\x65\x42\xd9\x96\xf0\x86\xab\xa3\x2f\x7b\x7b\xbf\x46\x2e\xfb\xbc\xdb\xe9\xf9\xee\xfb\xe9\x9b\xab\x6d\x3a\x58\xa7\x0d\xcb\x30\xca\xb4\xce\x24\xb2\x52\xd8\x7b\xd7\xb9\xd6\x87\xb1\x42\xb7\xd6\x66\xd9\x1e\x18\xef\xa4\x7a\x81\xf5\xb1\xed\x01\x5f\xeb\xcf\x46\xd3\xaf\xfb\xe9\x48\xd9\x18\x86\x06\x9d\xd9\xc0\x73\x08\xc3\xa6\x22\x62\x57\x94\xe4\x2a\x52\x18\x1a\x69\x24\x68\x2f\x28\x36\x67\xfd\xe7\x2f\x6c\x55\x1c\x2e\xde\xce\x17\xcb\x54\x18\x08\xcb\x03\xb7\xef\xa6\x1d\x33\x10\x5e\x1f\x4e\x86\x9f\x3e\x2f\x0e\xa4\x51\x34\x07\x69\x4a\xd7\xe9\x86\xa1\x54\xaa\xbe\xb5\xf8\x14\xfa\x9b\xae\x8c\x62\x92\x3b\xf9\xe0\x22\x03\xce\x6d\x1a\x94\x23\x58\x96\x3a\x23\x9a\xe8\x11\xa1\x15\x15\xd7\xaf\x10\x0d\xad\x8b\x3a\xd7\x93\x77\x1f\xf7\x44\x86\x4e\x87\xce\x6d\x5a\x32\xf1\x68\xdf\xf7\x8e\xac\x7f\x93\x12\xa8\xfc\x3b\xcd\x03\x19\xdf\xb8\x15\xb2\x47\x2d\x23\x9a\x4c\x4c\x55\xe9\x14\x21\xd1\xda\x55\x25\xa9\x2f\xf8\x1e\x42\x27\x55\xf6\x59\x48\xc9\xf6\x59\xa7\xcd\xf5\xfa\x2e\xa9\xb2\x88\x67\xe2\xff\x45\x7a\x75\x71\xfa\xe3\xd9\x79\xff\x1b\x79\x4e\x08\xeb\x1f\x2a\xda\xd3\xdf\x0e\xae\x49\x1f\xff\x7c\xc3\xac\x15\x99\x22\xf0\xdd\x3b\x72\xef\x75\xe1\xd0\x09\x69\x2c\xac\xad\xd0\xc6\xe7\xe7\x3f\x3c\xeb\xfa\xdf\x44\x38\x51\xb9\xb0\x7f\x71\x71\x71\xd1\x3f\x7f\xfe\xfc\x4f\xca\x39\x3f\xff\xb1\xff\xfc\xe2\xd9\xc5\x39\x75\x0e\xef\x34\xef\x2c\x7f\x4b\xc0\xa4\xca\x32\xa1\xb2\xc7\x0d\xf5\x74\xbe\x79\xe9\x43\xe5\x84\x41\x48\xa4\xe6\xcb\xff\xab\xa3\xed\x77\x87\xe4\xe9\xff\x22\xcc\x0f\x37\xd7\x42\x9b\xbe\x18\xd9\x1c\xe2\xca\x9a\x9a\xef\x51\x7e\xc7\xf5\x7c\xff\xb4\x6d\x9d\x11\xd7\xea\x71\x42\x49\x0b\x24\xba\x56\x70\x94\xfa\x97\x05\x87\xc4\x99\x9a\x88\xf9\x27\x27\xe1\xfb\x93\x50\xed\x6d\xe9\x58\x38\x58\x0b\x29\x81\xe7\xc8\x97\xdb\xa7\xb6\x5d\x59\xa0\x5a\x9d\x74\xe8\x62\xb9\x1b\xda\x32\x98\x56\x32\x7e\x12\xce\x12\xf1\x9a\x8d\x6e\xa7\xf3\xb7\xa3\xf1\xf7\xe7\x75\x6b\x9e\x8d\x6e\xe7\xc3\xe9\x5b\x38\xae\xe9\x9d\xc1\x10\x3f\x21\xaf\x88\x5b\x08\x77\xf2\x1f\xe6\xe7\x59\xff\xf4\xec\xc5\xf3\x1f\x3a\xb3\xf9\xe4\xdd\x6c\x74\x3b\x1e\xbc\xd9\x3b\xef\x1b\x15\x93\x6a\xee\x49\x81\x0f\x68\xed\xcd\x5f\x21\x40\xe5\xcc\xa6\xd4\x42\xb9\x78\xf7\x33\xe8\x41\x70\xcf\xfd\x01\xfc\xd6\xe9\xc2\x07\xf4\xbc\x74\xe7\x47\x4d\x4d\xff\xdd\xe8\xe6\xac\xad\x3e\xf2\xd8\x8a\x19\xa1\x2b\xbb\x77\x61\x6d\x19\x58\x13\x1a\xec\x01\x3a\x1e\x91\xd5\x03\xb5\xa1\x0b\x5d\x06\x28\x2d\x12\xe2\xa8\xe6\x7d\x36\xd5\x3d\xff\x94\x26\x6d\x2d\x98\x11\x07\xb3\x6e\x0f\x83\x5a\xf1\x9d\xe1\x78\x3e\xfd\xf8\x6e\x32\x1a\xcf\xc9\xa2\x7b\x8a\xdf\xb3\xca\xd2\x18\xb1\x76\xfa\x0a\x43\xa9\xb3\xb0\x66\xe4\x57\x5c\x2b\xab\xa9\x75\xfe\xd6\xf9\x67\x00\x00\x00\xff\xff\x45\x4e\x14\xb9\x5c\x17\x00\x00")

func imagesNodeDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeDockerfile,
		"images/node/Dockerfile",
	)
}

func imagesNodeDockerfile() (*asset, error) {
	bytes, err := imagesNodeDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/Dockerfile", size: 5980, mode: os.FileMode(420), modTime: time.Unix(1533077635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeDebugNodeService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x8f\xdb\x36\x10\x86\xef\xfc\x15\x6f\x2d\x20\x4e\x80\xb5\x95\xec\xa9\x48\xe1\x83\xb3\x76\x51\x23\x81\x0d\x58\xde\x2e\x82\xc5\xa2\xa0\xc8\xb1\xc4\x86\x22\x95\xe1\xd0\x1f\xff\xbe\x90\xbd\x41\xbb\x48\x0a\x44\xc7\xe1\xf3\x0e\x1f\xcd\xb0\xc0\x5d\xec\xcf\xec\x9a\x56\x70\xfb\xf6\xdd\xaf\xd8\xb5\x84\x8f\xb9\x26\x0e\x24\x94\x30\xcf\xd2\x46\x4e\x53\x55\xa8\x02\x9f\x9c\xa1\x90\xc8\x22\x07\x4b\x0c\x69\x09\xf3\x5e\x9b\x96\xbe\x9d\xdc\xe0\x4f\xe2\xe4\x62\xc0\xed\xf4\x2d\x5e\x0f\xc0\xe8\xf9\x68\xf4\xe6\x37\x55\xe0\x1c\x33\x3a\x7d\x46\x88\x82\x9c\x08\xd2\xba\x84\xbd\xf3\x04\x3a\x19\xea\x05\x2e\xc0\xc4\xae\xf7\x4e\x07\x43\x38\x3a\x69\x2f\xd7\x3c\x37\x99\xaa\x02\x9f\x9f\x5b\xc4\x5a\xb4\x0b\xd0\x30\xb1\x3f\x23\xee\xff\xcb\x41\xcb\x45\x78\xf8\x5a\x91\xfe\x7d\x59\x1e\x8f\xc7\xa9\xbe\xc8\x4e\x23\x37\xa5\xbf\x82\xa9\xfc\xb4\xba\x5b\xae\xab\xe5\xe4\x76\xfa\xf6\x12\xb9\x0f\x9e\x52\x02\xd3\xd7\xec\x98\x2c\xea\x33\x74\xdf\x7b\x67\x74\xed\x09\x5e\x1f\x11\x19\xba\x61\x22\x0b\x89\x83\xef\x91\x9d\xb8\xd0\xdc\x20\xc5\xbd\x1c\x35\x93\x2a\x60\x5d\x12\x76\x75\x96\x17\xc3\xfa\x66\xe7\xd2\x0b\x20\x06\xe8\x80\xd1\xbc\xc2\xaa\x1a\xe1\xc3\xbc\x5a\x55\x37\xaa\xc0\xc3\x6a\xf7\xc7\xe6\x7e\x87\x87\xf9\x76\x3b\x5f\xef\x56\xcb\x0a\x9b\x2d\xee\x36\xeb\xc5\x6a\xb7\xda\xac\x2b\x6c\x7e\xc7\x7c\xfd\x19\x1f\x57\xeb\xc5\x0d\xc8\x49\x4b\x0c\x3a\xf5\x3c\xf8\x47\x86\x1b\xc6\x48\x76\x98\x59\x45\xf4\x42\x60\x1f\xaf\x42\xa9\x27\xe3\xf6\xce\xc0\xeb\xd0\x64\xdd\x10\x9a\x78\x20\x0e\x2e\x34\xe8\x89\x3b\x97\x86\x65\x26\xe8\x60\x55\x01\xef\x3a\x27\x5a\x2e\x95\xef\x7e\x6a\xaa\x54\x71\x5d\x67\x22\x3e\x38\x43\xe0\x1c\x12\x52\xec\x08\x96\xea\xdc\x20\x49\xde\xef\x55\x81\xdd\x66\xb1\x79\x5d\x53\x90\x96\xc8\x5b\xe2\x37\xef\xc1\xd4\xc5\xc3\xf5\x35\xfc\xa2\x1e\xef\x83\x93\x27\xb5\xa0\x64\xd8\xf5\xc3\x75\xb3\xc5\xa5\x41\x88\x96\xd4\xf6\xba\x98\x34\xeb\xb2\x17\x37\xc9\x89\x78\x2a\x9a\x1b\x12\x35\xdf\x0b\xf1\x0f\xea\xea\xb1\xba\x2a\x3d\xa9\xdd\xb9\xa7\x59\x0c\x94\xda\x28\x6a\x4b\x9d\x76\xe1\x92\x5a\x9e\x9c\xcc\x84\x33\xa9\x62\x79\x22\x53\x89\x66\x99\x95\xb5\x0b\x65\xad\x53\x8b\x89\xc1\x38\x5b\x3a\x68\xdb\xc1\x85\x7d\xc4\xe4\x2b\xb4\xf7\x98\x68\x94\x96\x0e\x65\xb2\xfa\xdd\xf8\xe7\xa3\x3d\xc7\x9e\x58\xce\x98\x84\x7f\xf3\x98\x4c\xe8\xd4\x47\x96\xb1\xfa\xbf\x3e\x36\x9a\x2f\xc4\xc3\x60\xd1\x92\xf7\x71\x72\x8c\xec\x2d\x5e\xbd\x02\x99\x36\x62\xd4\x73\xb4\xd9\x08\x72\x76\x76\x34\x94\x8d\x16\x94\xe9\x9c\x4a\xe3\x75\x4a\xa5\xed\x5c\xe9\x6c\xf9\x8c\xfd\x35\x60\xdf\x87\x83\xee\xe8\x27\xc2\x03\x36\x56\xc5\x00\x96\x39\x71\xe9\xa3\xd1\xfe\xa2\xfb\x25\xd7\xa4\x6d\x37\x4d\xed\x58\x55\xa2\x83\xd5\x6c\x37\x59\xfa\x2c\xb3\xbf\x63\xe6\xa0\xbd\x52\x8f\xab\x90\x44\x7b\xff\xa4\x1e\x74\x10\xb2\x1f\xce\x3f\xd8\xdb\x3f\x01\x00\x00\xff\xff\x02\xbc\xc5\x40\x9c\x04\x00\x00")

func imagesNodeDebugNodeServiceBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeDebugNodeService,
		"images/node/debug-node.service",
	)
}

func imagesNodeDebugNodeService() (*asset, error) {
	bytes, err := imagesNodeDebugNodeServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/debug-node.service", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1533068892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\xd1\x72\xdb\x38\x12\x7c\x16\xbe\x62\xc2\xab\xd4\x49\x89\x4c\x5a\x72\xec\x38\xba\xe4\x41\x67\x3b\x89\x2a\x3e\x39\x65\x29\xe7\x4b\xe5\x5c\x09\x08\x0e\x49\x94\x41\x80\x0b\x80\xa2\xb9\x5b\xf9\xf7\xad\x01\x69\xaf\xbc\xbb\x0f\x96\x05\x12\xe8\xe9\xe9\x69\xb4\x92\x17\xec\xcc\xd4\x9d\x95\x45\xe9\x61\x7e\x38\x3b\x85\x6d\x89\xf0\xa9\x49\xd1\x6a\xf4\xe8\x60\xd9\xf8\xd2\x58\x17\x33\x76\x29\x05\x6a\x87\x19\x34\x3a\x43\x0b\xbe\x44\x58\xd6\x5c\x94\x08\xc3\x9b\x29\xfc\x17\xad\x93\x46\xc3\x3c\x3e\x84\x31\x6d\x88\x86\x57\xd1\xe4\x5f\xac\x33\x0d\x54\xbc\x03\x6d\x3c\x34\x0e\xc1\x97\xd2\x41\x2e\x15\x02\xde\x0b\xac\x3d\x48\x0d\xc2\x54\xb5\x92\x5c\x0b\x84\x56\xfa\x32\x14\x19\x20\x62\xf6\x75\x00\x30\xa9\xe7\x52\x03\x07\x61\xea\x0e\x4c\xbe\xbf\x0b\xb8\x67\x0c\x00\xa0\xf4\xbe\x5e\x24\x49\xdb\xb6\x31\x0f\x2c\x63\x63\x8b\x44\xf5\xbb\x5c\x72\xb9\x3a\xbb\x58\x6f\x2e\x0e\xe6\xf1\x21\x63\x5f\xb4\x42\xe7\xc0\xe2\x2f\x8d\xb4\x98\x41\xda\x01\xaf\x6b\x25\x05\x4f\x15\x82\xe2\x2d\x18\x0b\xbc\xb0\x88\x19\x78\x43\x3c\x5b\x2b\xbd\xd4\xc5\x14\x9c\xc9\x7d\xcb\x2d\xb2\x4c\x3a\x6f\x65\xda\xf8\x27\x02\x3d\xb0\x92\x0e\xf6\x37\x18\x0d\x5c\x43\xb4\xdc\xc0\x6a\x13\xc1\xbf\x97\x9b\xd5\x66\xca\x6e\x56\xdb\x8f\x57\x5f\xb6\x70\xb3\xbc\xbe\x5e\xae\xb7\xab\x8b\x0d\x5c\x5d\xc3\xd9\xd5\xfa\x7c\xb5\x5d\x5d\xad\x37\x70\xf5\x1e\x96\xeb\xaf\xf0\x69\xb5\x3e\x9f\x02\x4a\x5f\xa2\x05\xbc\xaf\x2d\x71\x37\x16\x24\x49\x87\x59\xcc\x36\x88\x4f\x8a\xe7\xa6\x27\xe3\x6a\x14\x32\x97\x02\x14\xd7\x45\xc3\x0b\x84\xc2\xec\xd0\x6a\xa9\x0b\xa8\xd1\x56\xd2\xd1\xf0\x1c\x70\x9d\x31\x25\x2b\xe9\xb9\x0f\xeb\xbf\xb4\x13\xb3\x17\x09\x63\xc9\x0b\xb6\xa5\x11\x52\x5d\xac\x50\x7b\x07\xa6\x21\x1a\x84\x8c\xda\xdb\xae\x36\x52\xfb\x18\x56\x7e\xc1\x0e\xa0\xe5\xd2\xbb\xc0\x65\xb3\xfa\xf0\x65\x73\x3d\x63\x07\x84\xa9\x01\xef\x51\x38\x18\x73\x5b\xec\xbe\xcd\x6e\xa7\xd0\x7f\x59\xdc\x4e\x01\xf5\xee\xdb\xe2\x76\xc2\xfa\x3a\x5c\x29\xd3\x3a\x68\x1c\xcd\xa0\x46\x9b\x1b\x5b\x81\x09\x2a\x70\xd1\x33\x95\x3a\xd0\x8c\xb4\xc9\x30\x02\x61\x34\x19\x05\x2d\xec\x24\x87\x1f\x99\x11\x77\x41\x31\x14\x3f\xd8\xf7\x14\x73\x63\xf1\x3b\xb4\x08\x25\xdf\x21\x41\x34\x5c\xa9\x0e\xa2\xd4\x18\x8f\x59\x14\x90\xa4\x96\x9e\xf4\x00\xdc\xa1\xed\x7c\x49\x52\xa1\x22\x9b\x29\xa3\x8b\xde\xa3\xd2\xc7\x8c\xdd\x20\x08\xae\xfb\x86\x1c\xea\xec\xa1\x49\xe2\x1a\x8c\x5e\x5b\x23\x68\x50\xb4\xb6\xb2\x28\xd0\x82\xf3\xdc\x92\x8b\x7a\xce\x3d\x81\x88\xfd\xa1\x1c\xb4\x84\xd6\x22\x70\x8b\x90\x19\x8d\x50\x5b\x62\x5d\xd1\x19\xae\x3b\xc2\xdc\x49\x9a\x19\x3d\x30\xfb\xbd\xc7\x8c\xad\xaf\xb6\x17\x8b\xbe\xf6\xfe\x90\x30\x03\xee\x80\x83\x93\xba\x50\xe4\x80\x59\xfc\xbf\x70\x0b\xa7\xd0\xb8\x1e\x47\x75\xbd\x5d\x7c\xa6\x64\x1a\xf7\xe2\x57\xfc\x0e\x1d\x48\x0f\xc8\x9d\x24\x37\x18\x48\x1b\xa9\x32\xa8\x8d\xf5\x3c\x55\xdd\x34\xc8\xd4\x8f\x89\x38\x6b\xba\x2c\x34\xed\xb6\xe4\x9e\x0e\x66\x06\x5d\x6f\x9c\x9a\x8b\x3b\xf2\x48\xc5\xa5\x66\x4c\x56\x04\x01\x63\x36\x8a\x8c\x8b\xc2\x67\xe2\x64\xa1\x49\x8b\x51\xe4\x3a\x27\xb8\x52\x11\x63\xa3\x48\x99\x22\x62\x13\xc6\x92\x04\x3a\x74\x7d\x6b\xae\x34\x8d\xca\x20\xed\x1d\x2f\xa0\xe2\xc2\x9a\x29\xa4\x8d\x27\x41\x94\xd4\xcd\x3d\xb9\x62\x98\x7d\x67\x9a\x7f\x5a\x6a\x3a\xa8\x6e\xa0\x40\xdf\xc3\x70\xdd\x95\xa6\x25\xe4\x21\x37\x2a\xae\x5f\x0f\x89\xa1\x9b\x7b\x5a\x1e\xd4\xbc\x40\x17\x5e\x0c\xfc\xe2\xd7\x71\xe9\x2b\xf5\x70\xca\x2d\x92\xa4\x90\xbe\x6c\xd2\x58\x98\x2a\xa9\x4c\xda\xf5\x1f\xa9\x32\x69\x72\x7c\x32\xcf\xf2\x53\x31\xcf\x4e\xf2\x57\xa7\x27\x87\x33\x71\x9a\xcd\xb2\xfc\xf5\xfc\xf8\xe4\xe8\xf4\xcd\xf1\xc9\x9b\x6c\x7e\x2c\x0e\xd3\x7c\x96\xd4\x77\xc5\x80\x3f\xfc\xfb\x1e\x28\xc4\x85\xf9\xc7\xe5\xec\x90\x09\xa3\x9d\x07\x27\x0b\xeb\x2b\xa9\xe1\x1d\x1c\xbd\x62\x2c\x6f\xb4\x08\x72\x8e\x27\xf0\x1b\x1b\x25\x09\x39\x65\x87\xda\xc3\xaf\xa6\x4a\x25\x3e\xb8\x0f\x1d\xcd\x9d\xc2\x95\xf2\x55\x29\xd2\xed\xf3\xea\x7c\x16\x06\xc5\xa1\x2d\xa5\xc2\x70\xfc\xa1\x9f\xbe\x74\x26\x31\xd6\xe8\xa9\xf7\x64\x9e\xd0\x45\xae\x65\xc6\x46\x83\x0a\xab\x42\x1b\x8b\xe3\x61\x52\xf1\x66\xf5\xe1\xec\xe3\xe5\xf9\x84\x05\xa0\xc2\xf2\xb4\xf7\xa5\x45\xae\xa2\xbd\x5c\xa0\xac\xaf\xc8\x33\xe1\xcf\x16\x0e\x72\x6b\xaa\x10\x21\xb4\x62\x23\x99\x83\x42\x3d\x36\x2e\x5e\xda\xc2\x4d\xe0\x2d\xcc\xa9\xb9\x91\x32\x45\xfc\x9e\x7b\xae\xc6\xd1\xda\x78\x40\x6d\x9a\xa2\xa4\x33\x4d\x1f\x42\xde\xec\x55\x79\x16\x4d\xd8\xe8\x27\x1b\x89\x2a\xeb\x93\x05\x16\xef\x60\x80\x0c\x69\xf3\xf8\x7d\x71\xdb\x33\xa6\xf6\xf6\x63\x0a\xc6\x86\x42\x43\x06\x43\x6d\x56\x1f\xae\xb7\xff\x59\xad\x5f\x1e\x51\x99\x8a\x7b\x51\x82\xeb\x9c\xc7\x2a\x9b\xb0\x91\x20\x70\xba\x29\x63\x51\x72\x4d\xd0\x9b\x20\xd1\x14\x66\x93\x47\xb9\xd6\xc6\xcb\xbc\x1b\x8b\x29\xec\x29\x46\x85\xf6\x1e\x84\x9d\xe3\x87\x21\xbf\x3c\x9a\x4c\x58\x68\xfb\xb3\x95\xda\x2b\x3d\x8e\x6e\x78\xf8\xfd\x79\xc2\x33\x8e\xe3\xa8\x2f\x43\x34\xde\x1e\x88\x20\x21\x2d\x9f\xbd\xfb\x73\xad\x47\x21\x03\x62\x3e\x8e\x2e\xee\x7b\x40\x9e\x7b\x4a\xa6\x40\x60\x01\xcf\x77\x74\x76\x38\x13\x4d\xe9\xf9\x84\x8d\x46\x16\x7d\x63\x35\xe9\x1a\x14\x7b\x4c\xf1\x3e\xec\xfe\x66\xd6\x53\xb8\x43\xac\x1f\xa2\x0e\xf5\x8e\x3d\x29\x7e\x8d\x02\xe5\x0e\x1f\x43\x73\x1a\xd0\xfa\x3b\x1a\x48\x3c\xdf\xfd\x5f\x47\x53\x78\x1c\x22\xb5\x39\x34\x74\x71\x8f\x62\xfc\xf8\x22\xcc\xf3\x42\xef\xa4\x35\x7a\x3c\x99\xb0\x9f\xec\xf7\x00\x00\x00\xff\xff\xdc\xae\xdc\x05\xe1\x08\x00\x00")

func imagesNodeEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeEntrypointMainGo,
		"images/node/entrypoint/main.go",
	)
}

func imagesNodeEntrypointMainGo() (*asset, error) {
	bytes, err := imagesNodeEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/entrypoint/main.go", size: 2273, mode: os.FileMode(420), modTime: time.Unix(1533080658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeJournalctlToTtyService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\xe3\x36\x10\xbd\xf3\x2b\x06\xd1\xa5\x05\x2c\x29\xcd\xa9\x48\xe1\x83\x37\x49\x51\x77\x17\x36\x60\x39\x0d\x16\x41\x0e\x23\x6a\x2c\x4d\x97\x22\x55\xce\x68\x15\xfd\x7d\x41\xd9\x69\x13\x14\xd5\x49\x9c\x79\xf3\xf8\xe6\x3d\x66\x70\x17\x86\x39\x72\xdb\x29\xdc\x5c\xff\xf4\x33\x1c\x3b\x82\xcf\x63\x4d\xd1\x93\x92\xc0\x66\xd4\x2e\x44\x29\x4c\x66\x32\xf8\xc2\x96\xbc\x50\x03\xa3\x6f\x28\x82\x76\x04\x9b\x01\x6d\x47\x6f\x9d\x15\xfc\x41\x51\x38\x78\xb8\x29\xae\xe1\x87\x04\xb8\xba\xb4\xae\x7e\xfc\xc5\x64\x30\x87\x11\x7a\x9c\xc1\x07\x85\x51\x08\xb4\x63\x81\x13\x3b\x02\x7a\xb5\x34\x28\xb0\x07\x1b\xfa\xc1\x31\x7a\x4b\x30\xb1\x76\xcb\x35\x17\x92\xc2\x64\xf0\xf5\x42\x11\x6a\x45\xf6\x80\x60\xc3\x30\x43\x38\xbd\xc7\x01\xea\x22\x38\x7d\x9d\xea\x70\x5b\x96\xd3\x34\x15\xb8\x88\x2d\x42\x6c\x4b\x77\x06\x4a\xf9\x65\x7b\xf7\xb0\xab\x1e\xf2\x9b\xe2\x7a\x19\x79\xf4\x8e\x44\x20\xd2\x5f\x23\x47\x6a\xa0\x9e\x01\x87\xc1\xb1\xc5\xda\x11\x38\x9c\x20\x44\xc0\x36\x12\x35\xa0\x21\xe9\x9d\x22\x2b\xfb\x76\x05\x12\x4e\x3a\x61\x24\x93\x41\xc3\xa2\x91\xeb\x51\x3f\x98\xf5\xa6\x8e\xe5\x03\x20\x78\x40\x0f\x57\x9b\x0a\xb6\xd5\x15\x7c\xda\x54\xdb\x6a\x65\x32\x78\xda\x1e\x7f\xdb\x3f\x1e\xe1\x69\x73\x38\x6c\x76\xc7\xed\x43\x05\xfb\x03\xdc\xed\x77\xf7\xdb\xe3\x76\xbf\xab\x60\xff\x2b\x6c\x76\x5f\xe1\xf3\x76\x77\xbf\x02\x62\xed\x28\x02\xbd\x0e\x31\xe9\x0f\x11\x38\xd9\x48\x4d\xf2\xac\x22\xfa\x20\xe0\x14\xce\x82\x64\x20\xcb\x27\xb6\xe0\xd0\xb7\x23\xb6\x04\x6d\xf8\x4e\xd1\xb3\x6f\x61\xa0\xd8\xb3\xa4\x30\x05\xd0\x37\x26\x03\xc7\x3d\x2b\xea\x52\xf9\xcf\x52\x85\x31\x19\xb0\x97\xe1\xcd\xb5\x96\xb5\x1b\xeb\xc2\x86\xbe\x6c\xb8\x5f\x38\x6e\x4d\xb6\xc4\x21\xb7\x65\xf9\xae\x1d\x06\xf2\xa2\x68\xbf\x95\xc8\x51\x3a\x1e\xf2\x1e\x51\xca\xda\x85\xba\xec\x51\x94\x62\xc9\x3d\xb6\x24\x65\xaa\xe7\x11\xed\xb7\xdc\x06\xaf\x31\x38\x47\xb1\x14\x1b\x79\x50\x29\xff\x0c\x63\xf4\xe8\xac\xba\x5c\x43\xae\x3a\x17\x42\xf1\x3b\xdb\x94\xc7\x31\xbd\xb3\xcb\x11\xe2\xe8\x05\xfe\x45\xa7\x0c\x4f\xc1\xb9\x30\x41\x1f\x1a\x5a\xc1\x10\xd8\xa7\x5c\x50\x97\x05\x55\xe7\x14\xc7\xd4\xb1\xed\xc0\x91\x0a\x8c\x89\xeb\xec\xe8\x85\x06\x5c\x68\x25\x11\xa5\x5a\xd2\x86\xec\x29\x82\x68\x13\x46\x2d\xcc\xf3\xa3\x67\x7d\x31\xf7\x74\xd6\xca\xc1\xaf\x7f\x3f\x0f\x36\x69\x12\x44\x23\x61\x4f\xd1\x1c\xce\xcf\x4e\xd6\x32\x8b\x52\xdf\xe4\x17\xfe\xe6\x9f\x5d\x36\x27\xa5\xf8\xff\x6d\xf3\x5c\x9d\xff\x5e\xcc\x81\x44\x31\xea\x1a\xdd\x84\xb3\xbc\x1d\x2b\xb2\xeb\x6b\xf3\xf0\x4a\xb6\x5a\xba\x65\xcd\xfe\x9d\x75\x90\xe7\x17\x2f\xf2\xdc\x87\x5c\x91\x9d\xa9\x14\x7d\x83\xb1\xd9\x8f\x3a\x8c\xba\x56\x9d\x8d\x79\xde\xa6\xc8\x9c\x7b\x31\x4f\x98\xcc\xfa\x34\xaf\xfb\xd1\x29\xe7\xa3\x50\x2c\x14\x63\x4b\x6a\xfe\x0e\x00\x00\xff\xff\xbb\xd7\xb0\x75\x5d\x04\x00\x00")

func imagesNodeJournalctlToTtyServiceBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeJournalctlToTtyService,
		"images/node/journalctl-to-tty.service",
	)
}

func imagesNodeJournalctlToTtyService() (*asset, error) {
	bytes, err := imagesNodeJournalctlToTtyServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/journalctl-to-tty.service", size: 1117, mode: os.FileMode(420), modTime: time.Unix(1532810548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeKubeadmSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdb\x4e\x10\xc5\xef\xfb\x29\xe6\x6f\x43\x6e\xa3\xfd\xb7\xc7\x10\x1b\x52\x70\x7a\x68\x21\x90\xa4\xd0\x5b\x18\xef\x8e\xa4\xc5\xab\x9d\x65\x77\x54\xdb\xa5\x1f\xbe\x58\x96\x4b\x48\xd3\x42\x2f\xda\x9d\xd1\x9b\xdf\xe8\x3d\x2d\xff\xb3\xdb\x90\x6c\xed\x8d\xa9\xac\x80\x02\x5c\x0a\x1f\x82\x9e\xcb\x83\x31\x4b\x08\xa9\x2a\xc5\x08\xbb\x71\xcb\xe4\x07\xb0\xd3\x2d\xb2\xce\x37\xa7\x11\xda\x22\x03\x8c\xb9\x6a\x61\x1a\x0c\x65\xc5\x8e\x15\xc6\xec\x49\x19\xae\xae\xe0\xd2\xb9\xb0\xf0\x38\xb5\xb4\x50\xaa\x59\x8a\x62\xaf\x9a\x2b\xb8\xb1\x44\x73\x7a\x00\x56\x98\x5a\xd7\xd6\x66\x72\x3b\xea\xb8\x36\x2e\xca\xe8\x9b\x4e\xa4\x8b\xdc\x38\x19\x2c\x65\xb5\x5e\xdc\xe9\xc4\x1d\x1f\x9b\x2e\x77\xf0\x03\xe6\x0a\xc8\x7b\x40\xe3\x48\xe1\xe6\x66\x73\x7f\x07\x6b\xcb\x3a\x69\x6d\x95\xb1\x38\xae\x4d\x0c\x55\x1b\x6f\x4f\x26\x4a\x62\x9d\x3b\xc6\xf3\x76\x5a\x7e\x6d\x4f\xea\xe6\xc5\xeb\x20\x67\xcb\xe7\x12\x0f\x9c\x02\x45\x18\x28\x24\xb3\xb9\xbf\x7b\xe5\xdb\xbc\x61\x1a\x31\x09\xce\x35\x16\x76\x32\x0c\x9c\x7c\xfd\x95\xe8\x25\xe3\x39\xd7\x09\x31\x50\xd9\x41\x2f\xd1\xff\x51\x65\xd8\xf5\x02\x8b\x4f\x5f\x3e\x6c\x3e\x6f\x9e\x9e\x37\x5f\x9f\x1e\x6e\x9f\x6f\x1f\x3e\x3e\xae\x10\x5b\x0a\x11\xeb\x9e\x32\x4a\x5a\xb5\x14\x2b\x2f\x60\xbd\x86\x29\x0b\xcf\x2d\x8d\x51\xed\xcc\x35\xa6\x1e\xab\xf2\x70\xfa\xa1\xb5\x97\xfd\x65\x5f\x53\xb9\x7c\x0b\x8e\xe7\x35\x44\xb4\x98\x62\x9d\x18\xe7\x11\x3f\x9f\xf6\xd5\x48\xe3\xed\xbb\xff\x71\xfe\xde\xc6\x49\x6a\x67\xc8\x36\x52\xff\x2f\x94\xf7\x6f\x53\xe8\xfb\x0b\xc8\x6f\x76\x96\xb0\x15\x51\xd0\x9e\x61\xa0\xaa\x5c\x20\x89\x67\xb3\x04\xc4\xd0\x25\x29\x8c\xb9\x70\x1b\x43\xd7\x2b\x72\x29\x52\xea\xea\x71\x4f\xd9\x5c\xf2\x0d\x29\xe8\x5f\xb4\x14\xa3\xf9\x19\x00\x00\xff\xff\xfb\xcc\x20\x57\x41\x03\x00\x00")

func imagesNodeKubeadmShBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeKubeadmSh,
		"images/node/kubeadm.sh",
	)
}

func imagesNodeKubeadmSh() (*asset, error) {
	bytes, err := imagesNodeKubeadmShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/kubeadm.sh", size: 833, mode: os.FileMode(493), modTime: time.Unix(1532912079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/node/20-kubeadm.conf": imagesNode20KubeadmConf,
	"images/node/Dockerfile": imagesNodeDockerfile,
	"images/node/debug-node.service": imagesNodeDebugNodeService,
	"images/node/entrypoint/main.go": imagesNodeEntrypointMainGo,
	"images/node/journalctl-to-tty.service": imagesNodeJournalctlToTtyService,
	"images/node/kubeadm.sh": imagesNodeKubeadmSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"images": &bintree{nil, map[string]*bintree{
		"node": &bintree{nil, map[string]*bintree{
			"20-kubeadm.conf": &bintree{imagesNode20KubeadmConf, map[string]*bintree{}},
			"Dockerfile": &bintree{imagesNodeDockerfile, map[string]*bintree{}},
			"debug-node.service": &bintree{imagesNodeDebugNodeService, map[string]*bintree{}},
			"entrypoint": &bintree{nil, map[string]*bintree{
				"main.go": &bintree{imagesNodeEntrypointMainGo, map[string]*bintree{}},
			}},
			"journalctl-to-tty.service": &bintree{imagesNodeJournalctlToTtyService, map[string]*bintree{}},
			"kubeadm.sh": &bintree{imagesNodeKubeadmSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

